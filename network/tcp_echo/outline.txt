

socket/epoll体系
thread应用


client.cpp: one connection per thread

client_epoll_bench.cpp: one loop per thread, multi_thread,  epoll, tracer, benchmark client



server.cpp: one connection per thread

server_epoll.cpp: one_loop_per_thread, single_thread, epoll, level_trigger, EPOLLIN, nonblocking, 

server_epoll_bench.cpp: one_loop_per_thread, multi_thread, accept_on_single_thread,  epoll, level_trigger, EPOLLIN, benchmark server

server_epoll_reuseport.cpp: one_loop_per_thread, multi_thread, SO_REUSEPORT, epoll, level_trigger, EPOLLIN, nonblocking,  

server_epoll_handle.cpp: one_loop_per_thread, single_thread, epoll, level_trigger, EPOLLIN, nonblocking, use handle(events) as interface between eventloop and concrete object

server_epoll_handle.c: one_loop_per_thread, single_thread, epoll, level_trigger, EPOLLIN, nonblocking, use handle(events) as interface between eventloop and concrete object

server_epollout_ref.cpp: 

server_epollout.cpp: one_loop_per_thread, single_thread, epoll, level_trigger, EPOLLIN, EPOLLOUT, nonblocking, 

server_epoll_et_ref.cpp:

server_epoll_et.cpp: one_loop_per_thread, single_thread, epoll, edge_trigger, EPOLLIN, EPOLLOUT, nonblocking, 




epollout, level_trigger // not completed

    need_send, enable_send, enable_epoll(LT, ET needn't)
    enable_send use send's return value

class Connection
{
    buffer;
    enable_epollout;

    write_buffer()
    {
        move_data_to_buffer();
        set(need_send);
        send_buf();
    }

    set_epollout(flag)
    {
        epoll_ctl(...);
        enable_epollout = flag;
    }

    // this function has two entries, the user and epollout.
    send_buf()
    {
        while ((send_len < need_send) && (tmp = ::send(...)) > 0)
        {   send_len += tmp;
        }

        if  (send_len == need_send)
        {   // send completed.
            if  (enable_epollout)
                set_epollout(false);
            return 1;
        }

        if  (tmp < 0 && ((errno == EAGAIN || errno == EWOULDBLOCK))
        {   // EAGAIN
            if  (!enable_epollout)
                set_epollout(ture);
            return 0;
        }

        return -1;
    }

    handle_write()
    {
        send_buf();
    }

};



epoll_out, edge_trigger

    need_send, enable_send, 
    enable_send use send's return value

class Connection
{
    buffer;

    write_buffer()
    {
        move_data_to_buffer();
        set(need_send);
        send_buf();
    }

    // this function has two entries, the user and epollout.
    send_buf()
    {
        while ((send_len < need_send) && (tmp = ::send(...)) > 0)
        {   send_len += tmp;
        }

        if  (send_len == need_send)
        {   // send completed.
            return 1;
        }

        if  (tmp < 0 && ((errno == EAGAIN || errno == EWOULDBLOCK))
        {   // EAGAIN
            return 0;
        }

        return -1;
    }

    handle_write()
    {
        send_buf();
    }
};