#!/usr/bin/env bpftrace
/*
 * tcpaccept.bt Trace TCP accept()s
 *              For Linux, uses bpftrace and eBPF.
 *
 * USAGE: tcpaccept.bt
 *
 * This is a bpftrace version of the bcc tool of the same name.
 *
 * This uses dynamic tracing of the kernel inet_csk_accept() socket function
 * (from tcp_prot.accept), and will need to be modified to match kernel changes.

 * Copyright (c) 2018 Dale Hamel.
 * Licensed under the Apache License, Version 2.0 (the "License")

 * 23-Nov-2018	Dale Hamel	created this.
 */

#include <linux/socket.h>
#include <net/sock.h>
#include <linux/tcp.h>
#include <net/tcp.h>

BEGIN
{
	printf("begin\n");
	// printf("Tracing TCP accepts. Hit Ctrl-C to end.\n");
	// printf("%-8s %-6s %-14s ", "TIME", "PID", "COMM");
	// printf("%-39s %-5s %-39s %-5s %s\n", "RADDR", "RPORT", "LADDR", "LPORT", "BL");

	// @tcp_states[1] = "ESTABLISHED";
    // @tcp_states[2] = "SYN_SENT";
    // @tcp_states[3] = "SYN_RECV";
    // @tcp_states[4] = "FIN_WAIT1";
    // @tcp_states[5] = "FIN_WAIT2";
    // @tcp_states[6] = "TIME_WAIT";
    // @tcp_states[7] = "CLOSE";
    // @tcp_states[8] = "CLOSE_WAIT";
    // @tcp_states[9] = "LAST_ACK";
    // @tcp_states[10] = "LISTEN";
    // @tcp_states[11] = "CLOSING";
    // @tcp_states[12] = "NEW_SYN_RECV";

    // @local_port = (uint16)1100;

    // @tcp_conn_request_num = 0;
    // @tcp_v4_syn_recv_sock_num = 0;
    // @inet_csk_accept_num = 0;

}


// kprobe:tcp_conn_request
// {
//     $sk = (struct sock *)arg2;
// 	$inet_family = $sk->__sk_common.skc_family;

//     if  ($inet_family == AF_INET)
//     {
//         @tcp_conn_request_num++;
//     }
// }

// kprobe:tcp_v4_syn_recv_sock
// {
//     $sk = (struct sock *)arg2;
// 	$inet_family = $sk->__sk_common.skc_family;

//     if  ($inet_family == AF_INET)
//     {
//         @tcp_v4_syn_recv_sock_num++;
//     }
// }

// kretprobe:inet_csk_accept
// {
//     $sk = (struct sock *)retval;
//     $inet_family = $sk->__sk_common.skc_family;
    
//     if  ($inet_family == AF_INET)
//     {
//         @inet_csk_accept_num++;
//     }
// }


tracepoint:myprot:myprot_port
{
    printf("myprot_prot\n");
}